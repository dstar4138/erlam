// Ring network
//      Each Node is a new process which passes the token to it's left
//      until it's seen the kill token. 

let token = 1        in let
    kill_token = 2   in let
    ring_size = 10   in let
    loop_count = 5   

// An individual node in the ring. 
in let node = fun rside,lside,_.(omega fun f.(
             let recv = (swap rside nil)     in
             let dead = (eq kill_token recv) in
             let _ = (swap lside recv)       in
                 if dead (printl 1) (f f)))

// Parent node which will count the loops.
in let pnode = fun rside,lside.(omega fun f,c.(
                 let recv = (swap rside nil)                    in
                 let dead = (eq c loop_count)                   in
                 let _ = (swap lside (if dead kill_token recv)) in
                     if dead (printl 1) (f f (inc c)))) 

// Start the Parent node after starting the token passing.
in let start_pnode = fun rside,lside.(
                        let _ = (swap lside token) in
                        (pnode rside lside 1))

// Spawns a new node with a channel and returns it's left side channel.
in let spawnnode = fun rside.(
        let lside = newchan in
            (ignore (spawn (node rside lside)) lside))

// Generate the ring and connects the last two. Then triggers the 
// ring to start passing.
in let mychan = newchan 
in let last_chan = (rep ring_size spawnnode mychan)
in 
    (start_pnode last_chan mychan)
