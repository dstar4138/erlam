#!/usr/bin/env Rscript
###
### ErLam Log Report Generation:
###
### Usage: ./reportgen [--png | --jpeg | --bmp | --tiff] <program.erlamlog>
### 
### Description:
### This script is used by ErLam to generate visual reports after the execution
### of a compiled script. Please see the runtime documentation for it's usage.
###
### Package Requirements:
Required <- c( 
              "ggplot2",
              "reshape2", 
              "RColorBrewer"
            )

# Check Commandline options for image generation.
cmd.args <- commandArgs(TRUE)
if( length(cmd.args)  < 1 ){
    print("ERROR: ErLam log non-existent.")
    quit("no",1)  #dont save progress, statuscode=1
} else if ( length( cmd.args ) > 2 ) {
    print("ERROR: Too many arguments.")
    quit("no",1)
}

# Get command-line option of path to erlamlog, and the export type.
IMAGE <- NA
if( length( cmd.args ) == 2 ) { 
    m <- regexpr("(?<=^--).+", cmd.args[1], perl=TRUE)
    IMAGE <- regmatches(cmd.args[1],m)
    if( !IMAGE %in% c('png','jpeg','bmp','tiff') ) {
        print(paste("ERROR: '",IMAGE,"' not a recognized export type.",sep=""))
        quit("no",1)
    }
    filename <- cmd.args[2] 
} else {
    filename <- cmd.args[1]
}
logname <- strsplit(filename, '\\.')[[1]]

# Load required libraries or fail
loadme <- function(name, ...) suppressMessages(library(name, ...))
rets <- sapply( Required, loadme, logical.return=TRUE,
                                   character.only=TRUE )
if( !(sum(rets) == length(Required)) ){
    print("ERROR: Unable to load required library.")
    quit("no", 1)
}

## Update system options ##
options( digits=12 ) # Timestamp is ssssss.mmmmmm (12 digits max)

# Open the (possibly very large) csv log file.
dat <- read.csv( filename )

# Sort the data matrix by the timestamp
dat <- dat[ order(dat$timestamp), ]

# Set up report document location next to log
if( is.na( IMAGE ) ){
    report_name <- paste(logname, ".pdf", sep="")
    pdf(file=report_name)
}

# Verify path to charts directory by getting the location of 
# this script file, despite where it is being called from.
cmd.args <- commandArgs()
m <- regexpr("(?<=^--file=).+",cmd.args, perl=TRUE)
path <- dirname(regmatches(cmd.args,m))
charts.dir <- paste(path,"/charts",sep="")

# Get list of charts needed by scraping sub directory.
for( chartf in list.files( charts.dir, pattern=".R" )){ 
    # Load that charts file:
    source( paste(charts.dir, "/", chartf, sep="") )

    # Get the name of the function:
    chartfun <- sub("\\.R", "", chartf)

    # Check to make sure it exists after sourcing:
    if( exists( chartfun, mode="function" ) ){

        if( !is.na( IMAGE ) ) {
            I <- get( IMAGE )
            I( paste(logname,chartfun,".",IMAGE,sep="") )
        }

        # Get the function and run it with the sorted data matrix:
        tmp <- get( chartfun )
        try( tmp( dat ) )
    }
}

